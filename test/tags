!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	include/mp.h	/^    Mat<ZZ_p> Ap, A, G, H;$/;"	m	class:mp
A	include/mpsphf.h	/^    Mat<ZZ_p> A;$/;"	m	class:mpsphf
A	include/plainlwe.h	/^    Mat<ZZ_p> A;$/;"	m	class:plainlwe
A	include/pregsphf.h	/^    Mat<ZZ_p> A;$/;"	m	class:pregsphf
A	include/ringlwe.h	/^    Mat<ZZ_pE> A;$/;"	m	class:ringlwe
A	include/rregsphf.h	/^    Mat<ZZ_pE> A;$/;"	m	class:rregsphf
Add	src/mp.cpp	/^Vec<ZZ_p> mp::Add(Vec<ZZ_p> a, Vec<ZZ_p> b){$/;"	f	class:mp
Add	src/plainlwe.cpp	/^Vec<ZZ_p> plainlwe::Add(Vec<ZZ_p> a, Vec<ZZ_p> b){$/;"	f	class:plainlwe
Ap	include/mp.h	/^    Mat<ZZ_p> Ap, A, G, H;$/;"	m	class:mp
Ap	include/mpsphf.h	/^    Mat<ZZ_p> Ap;$/;"	m	class:mpsphf
Ap	include/plainlwe.h	/^    Mat<ZZ_p> Ap;$/;"	m	class:plainlwe
Ap	include/pregsphf.h	/^    Mat<ZZ_p> Ap;$/;"	m	class:pregsphf
Ap	include/ringlwe.h	/^    Vec<ZZ_pE> Ap, b;$/;"	m	class:ringlwe
Ap	include/rregsphf.h	/^    Vec<ZZ_pE> Ap, b;$/;"	m	class:rregsphf
CC	Makefile	/^CC=g++$/;"	m
CFLAGS	Makefile	/^CFLAGS=-I$(IDIR) -std=c++11$/;"	m
ComputeG	src/mp.cpp	/^void mp::ComputeG(){$/;"	f	class:mp
ComputeRvID	src/mp.cpp	/^void mp::ComputeRvID(){$/;"	f	class:mp
ComputeS	src/mp.cpp	/^void mp::ComputeS(){$/;"	f	class:mp
ComputeSS	src/mp.cpp	/^void mp::ComputeSS(){$/;"	f	class:mp
ConvVecToZZ	src/mp.cpp	/^Vec<ZZ> mp::ConvVecToZZ(Vec<ZZ_p> x){$/;"	f	class:mp
ConvVecToZZp	src/mp.cpp	/^Vec<ZZ_p> mp::ConvVecToZZp(Vec<ZZ> x){$/;"	f	class:mp
D	src/mp.cpp	/^int mp::D() {$/;"	f	class:mp
D	test/lwetest.cpp	13;"	d	file:
D	test/sphftest.cpp	21;"	d	file:
DEPS	Makefile	/^DEPS = $(patsubst %,$(IDIR)\/%,$(_DEPS))$/;"	m
Decode	src/mp.cpp	/^Vec<ZZ> mp::Decode(Vec<ZZ> m){$/;"	f	class:mp
Decrypt	src/mp.cpp	/^Vec<ZZ_p> mp::Decrypt(Vec<ZZ_p> b){$/;"	f	class:mp
Decrypt	src/plainlwe.cpp	/^ZZ_p plainlwe::Decrypt(Vec<ZZ_p> c){$/;"	f	class:plainlwe
Decrypt	src/ringlwe.cpp	/^ZZ_pE ringlwe::Decrypt(Vec<ZZ_pE> c){$/;"	f	class:ringlwe
Double	src/mp.cpp	/^Vec<ZZ_p> mp::Double(Vec<ZZ_p> x){$/;"	f	class:mp
Double	src/plainlwe.cpp	/^Vec<ZZ_p> plainlwe::Double(Vec<ZZ_p> x){$/;"	f	class:plainlwe
Encode	src/mp.cpp	/^Vec<ZZ> mp::Encode(Vec<ZZ> m){$/;"	f	class:mp
Encrypt	src/mp.cpp	/^Vec<ZZ_p> mp::Encrypt(Vec<ZZ_p> m){$/;"	f	class:mp
Encrypt	src/plainlwe.cpp	/^Vec<ZZ_p> plainlwe::Encrypt(ZZ_p m){$/;"	f	class:plainlwe
Encrypt	src/ringlwe.cpp	/^Vec<ZZ_pE> ringlwe::Encrypt(ZZ_pE m){$/;"	f	class:ringlwe
EncryptR	src/mp.cpp	/^Vec<ZZ_p> mp::EncryptR(Vec<ZZ_p> m, Vec<ZZ_p> s, Vec<ZZ_p> e){$/;"	f	class:mp
EncryptR	src/plainlwe.cpp	/^Vec<ZZ_p> plainlwe::EncryptR(ZZ_p m, Vec<ZZ_p> r){$/;"	f	class:plainlwe
EncryptR	src/ringlwe.cpp	/^Vec<ZZ_pE> ringlwe::EncryptR(ZZ_pE m, Vec<ZZ_pE> r){$/;"	f	class:ringlwe
G	include/mp.h	/^    Mat<ZZ_p> Ap, A, G, H;$/;"	m	class:mp
GenTrap	src/mp.cpp	/^void mp::GenTrap(Mat<ZZ_p> Ab, Mat<ZZ_p> H){$/;"	f	class:mp
H	include/mp.h	/^    Mat<ZZ_p> Ap, A, G, H;$/;"	m	class:mp
Hash	src/mpsphf.cpp	/^ZZ_p mpsphf::Hash(Vec<ZZ_p> c, Vec<ZZ_p> m){$/;"	f	class:mpsphf
Hash	src/pregsphf.cpp	/^ZZ_p pregsphf::Hash(Vec<ZZ_p> c, ZZ_p m){$/;"	f	class:pregsphf
Hash	src/rregsphf.cpp	/^ZZ_pE rregsphf::Hash(Vec<ZZ_pE> c, ZZ_pE m){$/;"	f	class:rregsphf
HashKG	src/mpsphf.cpp	/^void mpsphf::HashKG(){$/;"	f	class:mpsphf
HashKG	src/pregsphf.cpp	/^void pregsphf::HashKG(){$/;"	f	class:pregsphf
HashKG	src/rregsphf.cpp	/^void rregsphf::HashKG(){$/;"	f	class:rregsphf
IDIR	Makefile	/^IDIR =include$/;"	m
InnerProduct	src/plainlwe.cpp	/^ZZ_p plainlwe::InnerProduct(Vec<ZZ_p> a, Vec<ZZ_p> b){$/;"	f	class:plainlwe
InnerProduct	src/ringlwe.cpp	/^ZZ_pE ringlwe::InnerProduct(Vec<ZZ_pE> a, Vec<ZZ_pE> b){$/;"	f	class:ringlwe
InvGA	src/mp.cpp	/^void mp::InvGA(Vec<ZZ_p> &s, Vec<ZZ_p> &e, Vec<ZZ_p> b){$/;"	f	class:mp
InvGOracle	src/mp.cpp	/^void mp::InvGOracle(ZZ_p &s, Vec<ZZ_p> &e, Vec<ZZ_p> b){$/;"	f	class:mp
KeyGen	src/mp.cpp	/^void mp::KeyGen(){	$/;"	f	class:mp
KeyGen	src/plainlwe.cpp	/^void plainlwe::KeyGen(){	$/;"	f	class:plainlwe
KeyGen	src/ringlwe.cpp	/^void ringlwe::KeyGen(){	$/;"	f	class:ringlwe
LIBS	Makefile	/^LIBS= -g -O2 -pthread -L\/usr\/local\/lib -lgtest -lntl -lgmp -lm -lgtest $/;"	m
M	test/lwetest.cpp	11;"	d	file:
M	test/sphftest.cpp	19;"	d	file:
Mod2	src/mp.cpp	/^ZZ_p mp::Mod2(ZZ a){$/;"	f	class:mp
Mod2	src/plainlwe.cpp	/^ZZ_p plainlwe::Mod2(ZZ a){$/;"	f	class:plainlwe
Mod2	src/ringlwe.cpp	/^ZZ_pE ringlwe::Mod2(ZZ_pE a){$/;"	f	class:ringlwe
Mult	src/mp.cpp	/^Vec<ZZ_p> mp::Mult(Mat<ZZ_p> a, Vec<ZZ_p> b){$/;"	f	class:mp
Mult	src/plainlwe.cpp	/^Vec<ZZ_p> plainlwe::Mult(Mat<ZZ_p> a, Vec<ZZ_p> b){$/;"	f	class:plainlwe
Mult	src/ringlwe.cpp	/^Vec<ZZ_pE> ringlwe::Mult(Mat<ZZ_pE> a, Vec<ZZ_pE> b){$/;"	f	class:ringlwe
MultT	src/mp.cpp	/^Vec<ZZ_p> mp::MultT(Mat<ZZ_p> a, Vec<ZZ_p> b){$/;"	f	class:mp
N	include/mp.h	/^    long m, Q, N, mu, lambda;$/;"	m	class:mp
N	include/mpsphf.h	/^    long m, N, mu, lambda;$/;"	m	class:mpsphf
N	include/plainlwe.h	/^    long m, N, mu, lambda;$/;"	m	class:plainlwe
N	include/pregsphf.h	/^    long m, N, mu, lambda;$/;"	m	class:pregsphf
N	include/ringlwe.h	/^    long d, N, mu, lambda;$/;"	m	class:ringlwe
N	include/rregsphf.h	/^    long d, N, mu, lambda;$/;"	m	class:rregsphf
N	test/lwetest.cpp	10;"	d	file:
N	test/mptest.cpp	10;"	d	file:
N	test/sphftest.cpp	18;"	d	file:
NUM	test/lwetest.cpp	9;"	d	file:
NUM	test/mptest.cpp	9;"	d	file:
NUM	test/sphftest.cpp	13;"	d	file:
OBJ	Makefile	/^OBJ = $(patsubst %,$(OBJP)\/%,$(_OBJ))$/;"	m
OBJP	Makefile	/^OBJP=obj$/;"	m
OTESTS	Makefile	/^OTESTS = $(patsubst %,$(TEST)\/%,$(_TESTS))$/;"	m
ProjHash	src/mpsphf.cpp	/^ZZ_p mpsphf::ProjHash(Vec<ZZ_p> c, Vec<ZZ_p> m, Vec<ZZ_p> w){$/;"	f	class:mpsphf
ProjHash	src/pregsphf.cpp	/^ZZ_p pregsphf::ProjHash(Vec<ZZ_p> c, ZZ_p m, Vec<ZZ_p> w){$/;"	f	class:pregsphf
ProjHash	src/rregsphf.cpp	/^ZZ_pE rregsphf::ProjHash(Vec<ZZ_pE> c, ZZ_pE m, Vec<ZZ_pE> w){$/;"	f	class:rregsphf
ProjKG	src/mpsphf.cpp	/^void mpsphf::ProjKG(){$/;"	f	class:mpsphf
ProjKG	src/pregsphf.cpp	/^void pregsphf::ProjKG(){$/;"	f	class:pregsphf
ProjKG	src/rregsphf.cpp	/^void rregsphf::ProjKG(){$/;"	f	class:rregsphf
Q	include/mp.h	/^    long m, Q, N, mu, lambda;$/;"	m	class:mp
Q	test/lwetest.cpp	12;"	d	file:
Q	test/mptest.cpp	11;"	d	file:
Q	test/sphftest.cpp	20;"	d	file:
R	include/mp.h	/^    Mat<ZZ_p> R; $/;"	m	class:mp
Round	src/mpsphf.cpp	/^ZZ_p mpsphf::Round(ZZ_p x){$/;"	f	class:mpsphf
Round	src/pregsphf.cpp	/^ZZ_p pregsphf::Round(ZZ_p x){$/;"	f	class:pregsphf
Round	src/rregsphf.cpp	/^ZZ_pE rregsphf::Round(ZZ_pE x){$/;"	f	class:rregsphf
RvID	include/mp.h	/^    Mat<ZZ_p> RvID; $/;"	m	class:mp
S	include/mp.h	/^    Mat<ZZ> S; $/;"	m	class:mp
SRC	Makefile	/^SRC=src$/;"	m
SS	include/mp.h	/^    Mat<ZZ> SS; $/;"	m	class:mp
SampleD	src/mp.cpp	/^Mat<ZZ_p> mp::SampleD(int n, int m){$/;"	f	class:mp
SampleM	src/mp.cpp	/^ZZ_p mp::SampleM(){$/;"	f	class:mp
SampleMessage	src/mp.cpp	/^Vec<ZZ_p> mp::SampleMessage(){$/;"	f	class:mp
SampleMessage	src/plainlwe.cpp	/^ZZ_p plainlwe::SampleMessage(){$/;"	f	class:plainlwe
SampleMessage	src/ringlwe.cpp	/^ZZ_pE ringlwe::SampleMessage(){$/;"	f	class:ringlwe
SampleNoise	src/mp.cpp	/^ZZ_p mp::SampleNoise(){$/;"	f	class:mp
SampleNoise	src/plainlwe.cpp	/^ZZ_p plainlwe::SampleNoise(){$/;"	f	class:plainlwe
SampleNoise	src/ringlwe.cpp	/^ZZ_pE ringlwe::SampleNoise(){$/;"	f	class:ringlwe
SampleNoiseArray	src/mp.cpp	/^Vec<ZZ_p> mp::SampleNoiseArray(long n){$/;"	f	class:mp
SampleNoiseArray	src/plainlwe.cpp	/^Vec<ZZ_p> plainlwe::SampleNoiseArray(long n){$/;"	f	class:plainlwe
SampleNoiseArray	src/ringlwe.cpp	/^Vec<ZZ_pE> ringlwe::SampleNoiseArray(){$/;"	f	class:ringlwe
SampleR	src/mp.cpp	/^Vec<ZZ_p> mp::SampleR(){$/;"	f	class:mp
SampleR	src/plainlwe.cpp	/^Vec<ZZ_p> plainlwe::SampleR(){$/;"	f	class:plainlwe
SampleR	src/ringlwe.cpp	/^Vec<ZZ_pE> ringlwe::SampleR(){$/;"	f	class:ringlwe
SampleRandom	src/mp.cpp	/^Mat<ZZ_p> mp::SampleRandom(){$/;"	f	class:mp
SampleRandom	src/plainlwe.cpp	/^Mat<ZZ_p> plainlwe::SampleRandom(){$/;"	f	class:plainlwe
SampleRandom	src/ringlwe.cpp	/^Vec<ZZ_pE> ringlwe::SampleRandom(){$/;"	f	class:ringlwe
ScalarMul	src/mp.cpp	/^Vec<ZZ_p> mp::ScalarMul(Vec<ZZ_p> x, ZZ_p c){$/;"	f	class:mp
SetID	src/mp.cpp	/^Mat<ZZ_p> mp::SetID(int n){$/;"	f	class:mp
Sub	src/mp.cpp	/^Vec<ZZ_p> mp::Sub(Vec<ZZ_p> a, Vec<ZZ_p> b){$/;"	f	class:mp
TEST	Makefile	/^TEST=test$/;"	m
TEST	test/mptest.cpp	/^TEST(MP_SCHEME_Test, MP_SCHEME_INVERT){$/;"	f
TEST	test/sphftest.cpp	/^TEST(MP_SPHF_Test, MP_SPHF_CORRECT){$/;"	f
Transpose	src/mp.cpp	/^Mat<ZZ> mp::Transpose(Mat<ZZ> a){$/;"	f	class:mp
Transpose	src/mp.cpp	/^Mat<ZZ_p> mp::Transpose(Mat<ZZ_p> a){$/;"	f	class:mp
Transpose	src/plainlwe.cpp	/^Mat<ZZ_p> plainlwe::Transpose(Mat<ZZ_p> a){$/;"	f	class:plainlwe
Transpose	src/ringlwe.cpp	/^Mat<ZZ_pE> ringlwe::Transpose(Mat<ZZ_pE> a){$/;"	f	class:ringlwe
Zeros	src/mp.cpp	/^Vec<ZZ_p> mp::Zeros(int n){$/;"	f	class:mp
_DEPS	Makefile	/^_DEPS = mp.h plainlwe.h ringlwe.h mpsphf.h rregsphf.h pregsphf.h$/;"	m
_OBJ	Makefile	/^_OBJ = mp.o plainlwe.o ringlwe.o mpsphf.o rregsphf.o pregsphf.o$/;"	m
_OTESTS	Makefile	/^_OTESTS = mptest.o lwetest.o sphftest.o$/;"	m
add	src/mp.cpp	/^Mat<ZZ_p> mp::add(Mat<ZZ_p> a, Mat<ZZ_p> b){$/;"	f	class:mp
b	include/mp.h	/^    Vec<ZZ_p> b;$/;"	m	class:mp
b	include/mpsphf.h	/^    Vec<ZZ_p> b;$/;"	m	class:mpsphf
b	include/plainlwe.h	/^    Vec<ZZ_p> b;$/;"	m	class:plainlwe
b	include/pregsphf.h	/^    Vec<ZZ_p> b;$/;"	m	class:pregsphf
b	include/ringlwe.h	/^    Vec<ZZ_pE> Ap, b;$/;"	m	class:ringlwe
b	include/rregsphf.h	/^    Vec<ZZ_pE> Ap, b;$/;"	m	class:rregsphf
concat	src/mp.cpp	/^Mat<ZZ_p> mp::concat(Mat<ZZ_p> a, Mat<ZZ_p> b){$/;"	f	class:mp
concat	src/mp.cpp	/^Vec<ZZ_p> mp::concat(Vec<ZZ_p> a, Vec<ZZ_p> b){$/;"	f	class:mp
concatv	src/mp.cpp	/^Mat<ZZ_p> mp::concatv(Mat<ZZ_p> a, Mat<ZZ_p> b){$/;"	f	class:mp
d	include/ringlwe.h	/^    long d, N, mu, lambda;$/;"	m	class:ringlwe
d	include/rregsphf.h	/^    long d, N, mu, lambda;$/;"	m	class:rregsphf
delta	include/mp.h	/^    double delta;$/;"	m	class:mp
delta	include/plainlwe.h	/^    double delta;$/;"	m	class:plainlwe
delta	include/ringlwe.h	/^    double delta;$/;"	m	class:ringlwe
g	src/mp.cpp	/^Vec<ZZ_p> mp::g(Vec<ZZ_p> s, Vec<ZZ_p> e){$/;"	f	class:mp
hk	include/mpsphf.h	/^    Vec<ZZ_p> hk;$/;"	m	class:mpsphf
hk	include/pregsphf.h	/^    Vec<ZZ_p> hk;$/;"	m	class:pregsphf
hk	include/rregsphf.h	/^    Vec<ZZ_pE> hk;$/;"	m	class:rregsphf
invS	include/mp.h	/^    Mat<ZZ> invS; $/;"	m	class:mp
invSS	include/mp.h	/^    Mat<ZZ> invSS; $/;"	m	class:mp
lambda	include/mp.h	/^    long m, Q, N, mu, lambda;$/;"	m	class:mp
lambda	include/mpsphf.h	/^    long m, N, mu, lambda;$/;"	m	class:mpsphf
lambda	include/plainlwe.h	/^    long m, N, mu, lambda;$/;"	m	class:plainlwe
lambda	include/pregsphf.h	/^    long m, N, mu, lambda;$/;"	m	class:pregsphf
lambda	include/ringlwe.h	/^    long d, N, mu, lambda;$/;"	m	class:ringlwe
lambda	include/rregsphf.h	/^    long d, N, mu, lambda;$/;"	m	class:rregsphf
m	include/mp.h	/^    long m, Q, N, mu, lambda;$/;"	m	class:mp
m	include/mpsphf.h	/^    long m, N, mu, lambda;$/;"	m	class:mpsphf
m	include/plainlwe.h	/^    long m, N, mu, lambda;$/;"	m	class:plainlwe
m	include/pregsphf.h	/^    long m, N, mu, lambda;$/;"	m	class:pregsphf
main	test/lwetest.cpp	/^int main(){$/;"	f
main	test/mptest.cpp	/^int main(){$/;"	f
main	test/sphftest.cpp	/^int main(int argc, char **argv){$/;"	f
mp	include/mp.h	/^class mp{$/;"	c
mp	src/mp.cpp	/^mp::mp(long N, long m, ZZ q, long Q){$/;"	f	class:mp
mpEncTest	test/mptest.cpp	/^void mpEncTest(){$/;"	f
mpInvTest	test/mptest.cpp	/^void mpInvTest(){$/;"	f
mpsphf	include/mpsphf.h	/^class mpsphf{$/;"	c
mpsphf	src/mpsphf.cpp	/^mpsphf::mpsphf(long N, long m, ZZ q, Mat<ZZ_p> A, mp *scheme){$/;"	f	class:mpsphf
mpsphfTest	test/sphftest.cpp	/^void mpsphfTest(){$/;"	f
mu	include/mp.h	/^    long m, Q, N, mu, lambda;$/;"	m	class:mp
mu	include/mpsphf.h	/^    long m, N, mu, lambda;$/;"	m	class:mpsphf
mu	include/plainlwe.h	/^    long m, N, mu, lambda;$/;"	m	class:plainlwe
mu	include/pregsphf.h	/^    long m, N, mu, lambda;$/;"	m	class:pregsphf
mu	include/ringlwe.h	/^    long d, N, mu, lambda;$/;"	m	class:ringlwe
mu	include/rregsphf.h	/^    long d, N, mu, lambda;$/;"	m	class:rregsphf
mul	src/mp.cpp	/^Mat<ZZ_p> mp::mul(Mat<ZZ_p> a, Mat<ZZ_p> b){$/;"	f	class:mp
mulv	src/mp.cpp	/^Vec<ZZ> mp::mulv(Mat<ZZ> a, Vec<ZZ> b){$/;"	f	class:mp
ph	include/mpsphf.h	/^    Vec<ZZ_p> ph;$/;"	m	class:mpsphf
ph	include/pregsphf.h	/^    Vec<ZZ_p> ph;$/;"	m	class:pregsphf
ph	include/rregsphf.h	/^    Vec<ZZ_pE> ph;$/;"	m	class:rregsphf
plainlwe	include/plainlwe.h	/^class plainlwe{$/;"	c
plainlwe	src/plainlwe.cpp	/^plainlwe::plainlwe(long N, long m, ZZ q){$/;"	f	class:plainlwe
plainlweTest	test/lwetest.cpp	/^void plainlweTest(){$/;"	f
pregsphf	include/pregsphf.h	/^class pregsphf{$/;"	c
pregsphf	src/pregsphf.cpp	/^pregsphf::pregsphf(long N, long m, ZZ q, Mat<ZZ_p> Ap, Vec<ZZ_p> b){$/;"	f	class:pregsphf
pregsphfTest	test/sphftest.cpp	/^void pregsphfTest(){$/;"	f
q	include/mp.h	/^    ZZ q;$/;"	m	class:mp
q	include/mpsphf.h	/^    ZZ q;$/;"	m	class:mpsphf
q	include/plainlwe.h	/^    ZZ q;$/;"	m	class:plainlwe
q	include/pregsphf.h	/^    ZZ q;$/;"	m	class:pregsphf
q	include/ringlwe.h	/^    ZZ q;$/;"	m	class:ringlwe
q	include/rregsphf.h	/^    ZZ q;$/;"	m	class:rregsphf
ringlwe	include/ringlwe.h	/^class ringlwe{$/;"	c
ringlwe	src/ringlwe.cpp	/^ringlwe::ringlwe(long N, long d, ZZ q, double delta){$/;"	f	class:ringlwe
ringlweAddTest	test/lwetest.cpp	/^void ringlweAddTest(){$/;"	f
ringlweTest	test/lwetest.cpp	/^void ringlweTest(){$/;"	f
rregsphf	include/rregsphf.h	/^class rregsphf{$/;"	c
rregsphf	src/rregsphf.cpp	/^rregsphf::rregsphf(long N, long d, ZZ q, Vec<ZZ_pE> Ap, Vec<ZZ_pE> b){$/;"	f	class:rregsphf
rregsphfTest	test/sphftest.cpp	/^void rregsphfTest(){$/;"	f
s	include/mp.h	/^    Vec<ZZ_p> s;    $/;"	m	class:mp
s	include/mpsphf.h	/^    Vec<ZZ_p> s;    $/;"	m	class:mpsphf
s	include/plainlwe.h	/^    Vec<ZZ_p> s;    $/;"	m	class:plainlwe
s	include/pregsphf.h	/^    Vec<ZZ_p> s;    $/;"	m	class:pregsphf
s	include/ringlwe.h	/^    Vec<ZZ_pE> s;    $/;"	m	class:ringlwe
s	include/rregsphf.h	/^    Vec<ZZ_pE> s;    $/;"	m	class:rregsphf
scheme	include/mpsphf.h	/^    mp *scheme;$/;"	m	class:mpsphf
sp	include/mp.h	/^    Vec<ZZ_p> sp;$/;"	m	class:mp
sp	include/mpsphf.h	/^    Vec<ZZ_p> sp;$/;"	m	class:mpsphf
sp	include/plainlwe.h	/^    Vec<ZZ_p> sp;$/;"	m	class:plainlwe
sp	include/pregsphf.h	/^    Vec<ZZ_p> sp;$/;"	m	class:pregsphf
sp	include/ringlwe.h	/^    ZZ_pE sp;$/;"	m	class:ringlwe
sp	include/rregsphf.h	/^    ZZ_pE sp;$/;"	m	class:rregsphf
sub	src/mp.cpp	/^Mat<ZZ_p> mp::sub(Mat<ZZ_p> a, Mat<ZZ_p> b){$/;"	f	class:mp
